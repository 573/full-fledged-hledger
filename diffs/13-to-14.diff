diff -X .gitignore -Naurb ././13-tax-returns/export/export.hs ././14-speeding-up/export/export.hs
--- ././13-tax-returns/export/export.hs
+++ ././14-speeding-up/export/export.hs
@@ -119,6 +119,8 @@
   let first = firstYear flags
       current = currentYear flags
 
+  absoluteBaseDir <- liftIO $ makeAbsolute (baseDir flags)
+      
   if null targets then want (reports first current) else want targets
 
   -- Discover and cache the list of all includes for the given .journal file, recursively
@@ -165,6 +167,8 @@
   -- Tax year report
   "*-tax.txt" %> generate_tax_return year_inputs
 
+  "//import//*.matching_rules" %> generate_matching_rules absoluteBaseDir
+
 -------------------------------------
 -- Implementations of the build rules
 -------------------------------------
@@ -208,6 +212,18 @@
   (Stdout output) <- cmd (Cwd source_dir) Shell "./in2csv" (map (makeRelative source_dir) inputs)
   writeFileChanged out output
 
+-- produce <importdir>/csv/filename.matching_rules out of <importdir>/csv/filename.csv and <importdir>/rules.psv
+generate_matching_rules base_dir out = do
+  let (csv_dir, file) = splitFileName out
+  let source_dir = parentOf "csv" csv_dir
+  let export_dir = parentOf "import" csv_dir </> "export"
+  let input = out -<.> "csv"
+  let deps = map (source_dir </>) $ extraDeps out
+  let matching_rules_py = base_dir </> "export" </> "matching_rules.py"
+  need $ (source_dir </> "rules.psv"):matching_rules_py:input:deps
+  (Stdout output) <- cmd (Cwd source_dir) Shell (makeRelative source_dir matching_rules_py) ["rules.psv", makeRelative source_dir input]
+  writeFileChanged out output
+
 -- To produce <importdir>/journal/filename.journal, look for <importdir>/csv/filename.csv and
 -- process it with <importdir>/csv2journal
 csv2journal out = do
@@ -215,7 +231,11 @@
   let source_dir = parentOf "journal" journal_dir
   let csv_dir = replaceDir "journal" "csv" journal_dir
   let input = csv_dir </> (file -<.> "csv")
-  let deps = map (source_dir </>) $ extraDeps out
+  let replace_rules_psv = \dep ->
+        case dep of
+          "rules.psv" -> input -<.> "matching_rules"
+          otherwise -> source_dir </> dep
+  let deps = map replace_rules_psv (extraDeps out)
   need $ (source_dir </> "csv2journal"):(input:deps)
   (Stdout output) <- cmd (Cwd source_dir) Shell "./csv2journal" [makeRelative source_dir input]
   writeFileChanged out output
diff -X .gitignore -Naurb ././13-tax-returns/export/investments.sh ././14-speeding-up/export/investments.sh
--- ././13-tax-returns/export/investments.sh
+++ ././14-speeding-up/export/investments.sh
@@ -6,8 +6,11 @@
             --investment "acct:assets:${asset} not:acct:equity" \
             --pnl 'acct:virtual:unrealized not:acct:equity' "$@"
 }
+export -f report
 
+parallel -k :::: <<EOF
 echo "Pension"
 echo
 report "pension"
 report "pension" -Y
+EOF
diff -X .gitignore -Naurb ././13-tax-returns/export/matching_rules.py ././14-speeding-up/export/matching_rules.py
--- ././13-tax-returns/export/matching_rules.py
+++ ././14-speeding-up/export/matching_rules.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python3
+import sys
+import re
+
+def main(rules_file, csv_file):
+    with open(rules_file, 'r') as file:
+        rules = [
+            (line.split('|')[0], line)
+            for line in file.read().splitlines()
+        ]
+
+    with open(csv_file, 'r') as file:
+        contents = file.read()
+
+    for re_pattern, full_rule in rules:
+        rex = re.compile(re_pattern)
+        if rex.search(contents):
+            print(full_rule)
+
+if __name__ == "__main__":
+    main(sys.argv[1], sys.argv[2])
diff -X .gitignore -Naurb ././13-tax-returns/export/tax_return.sh ././14-speeding-up/export/tax_return.sh
--- ././13-tax-returns/export/tax_return.sh
+++ ././14-speeding-up/export/tax_return.sh
@@ -4,12 +4,17 @@
 
 dir=$(dirname $0)
 
+export year year2 dir
+
 function gen_input(){
     echo "include ${dir}/../${year}.journal"
     echo "include ${dir}/${year}-closing.journal"
     echo "include ${dir}/../${year2}.journal"
 }
 
+export -f gen_input
+
+parallel -k :::: <<EOF
 echo "INCOME TOTALS"
 echo "============="
 
@@ -27,3 +32,4 @@
     -b $year-04-06 -e $year2-04-06 # end date is not inclusive
 echo
 
+EOF
